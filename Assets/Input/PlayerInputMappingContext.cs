//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInputMappingContext.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputMappingContext: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputMappingContext()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMappingContext"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""d12b9ff3-b6bd-4ebe-b120-626d90a88390"",
            ""actions"": [
                {
                    ""name"": ""Right/Left"",
                    ""type"": ""Button"",
                    ""id"": ""1097dc85-4ec9-4260-aa28-0d59a498bb2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""a8d5456a-b620-423a-99b9-09b40fff588c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4465ace5-c857-4ef8-a5ab-8d285297a5f1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right/Left"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""02bdb2c7-23e0-496b-82da-e0c149e54011"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInput"",
                    ""action"": ""Right/Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a172baac-54bf-408c-8ddc-17de31da9948"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e4e52311-fe7f-4512-b773-b5797007e06f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""06ca4b29-8ea0-4984-a1e7-9a55917b0452"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Trigger"",
            ""id"": ""0bcf416a-7b08-42d1-b913-342fdd6ab99f"",
            ""actions"": [
                {
                    ""name"": ""Nitro"",
                    ""type"": ""Value"",
                    ""id"": ""d181dcca-a3bf-40f1-9859-2814b103bd04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00344b7a-2f46-4709-bd1b-8539132d6627"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nitro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerInput"",
            ""bindingGroup"": ""PlayerInput"",
            ""devices"": []
        }
    ]
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_RightLeft = m_Move.FindAction("Right/Left", throwIfNotFound: true);
        m_Move_Roll = m_Move.FindAction("Roll", throwIfNotFound: true);
        // Trigger
        m_Trigger = asset.FindActionMap("Trigger", throwIfNotFound: true);
        m_Trigger_Nitro = m_Trigger.FindAction("Nitro", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_RightLeft;
    private readonly InputAction m_Move_Roll;
    public struct MoveActions
    {
        private @PlayerInputMappingContext m_Wrapper;
        public MoveActions(@PlayerInputMappingContext wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightLeft => m_Wrapper.m_Move_RightLeft;
        public InputAction @Roll => m_Wrapper.m_Move_Roll;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @RightLeft.started += instance.OnRightLeft;
            @RightLeft.performed += instance.OnRightLeft;
            @RightLeft.canceled += instance.OnRightLeft;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @RightLeft.started -= instance.OnRightLeft;
            @RightLeft.performed -= instance.OnRightLeft;
            @RightLeft.canceled -= instance.OnRightLeft;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Trigger
    private readonly InputActionMap m_Trigger;
    private List<ITriggerActions> m_TriggerActionsCallbackInterfaces = new List<ITriggerActions>();
    private readonly InputAction m_Trigger_Nitro;
    public struct TriggerActions
    {
        private @PlayerInputMappingContext m_Wrapper;
        public TriggerActions(@PlayerInputMappingContext wrapper) { m_Wrapper = wrapper; }
        public InputAction @Nitro => m_Wrapper.m_Trigger_Nitro;
        public InputActionMap Get() { return m_Wrapper.m_Trigger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggerActions set) { return set.Get(); }
        public void AddCallbacks(ITriggerActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggerActionsCallbackInterfaces.Add(instance);
            @Nitro.started += instance.OnNitro;
            @Nitro.performed += instance.OnNitro;
            @Nitro.canceled += instance.OnNitro;
        }

        private void UnregisterCallbacks(ITriggerActions instance)
        {
            @Nitro.started -= instance.OnNitro;
            @Nitro.performed -= instance.OnNitro;
            @Nitro.canceled -= instance.OnNitro;
        }

        public void RemoveCallbacks(ITriggerActions instance)
        {
            if (m_Wrapper.m_TriggerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggerActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggerActions @Trigger => new TriggerActions(this);
    private int m_PlayerInputSchemeIndex = -1;
    public InputControlScheme PlayerInputScheme
    {
        get
        {
            if (m_PlayerInputSchemeIndex == -1) m_PlayerInputSchemeIndex = asset.FindControlSchemeIndex("PlayerInput");
            return asset.controlSchemes[m_PlayerInputSchemeIndex];
        }
    }
    public interface IMoveActions
    {
        void OnRightLeft(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface ITriggerActions
    {
        void OnNitro(InputAction.CallbackContext context);
    }
}
